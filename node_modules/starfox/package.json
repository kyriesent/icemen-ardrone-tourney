{
  "name": "starfox",
  "version": "0.0.1",
  "description": "HTML 5 Gamepad input, streamed to node via websockets",
  "main": "index.js",
  "scripts": {
    "test": "npm test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/kwhinnery/starfox"
  },
  "keywords": [
    "gamepad",
    "html5",
    "websockets"
  ],
  "author": {
    "name": "Kevin Whinnery"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kwhinnery/starfox/issues"
  },
  "homepage": "https://github.com/kwhinnery/starfox",
  "dependencies": {
    "ws": "^0.4.31",
    "browserify": "^4.1.5",
    "lodash": "^2.4.1"
  },
  "browser": "./lib/client.js",
  "readme": "# STARFOX\n\nHTML 5 Gamepad controller input (works on latest Chrome), magically beamed to your node.js application over a web socket.\n\n# API\n\n## Server\n\nSee the demo directory, specifically `demo/app.js` for a simple example.  Requiring the `starfox` module returns a singleton object, which is an [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter).\n\n        var starfox = require('starfox');\n\n        // Pass an HTTP server in to the module\n        starfox.mount(httpServerYouCreate, {\n            url: '', // the prefix URL for the JS file sent to the client, default none\n            port: 8080 // port for web socket server, default 8080\n        });\n\n        // Each connection represents a single client, who might have multiple\n        // gamepads attached.\n        starfox.on('connection', function(player) {\n\n            // Whenever the state of the gamepad changes (e.g. once when the button\n            // is pressed, and again when it is let go), this event is fired\n            player.on('input', function(gamepadState) {\n                console.log(gamepadState);\n            });\n\n            // Whenever a gamepad is connected or disconnected, this event fires\n            player.on('gamepadsChanged', function(gamepads) {\n                console.log(gamepads);\n            });\n        });\n\n## Client\n\nThe browser API for Starfox is generated on the server using browserify.  It can be included as a script tag, or your client-side application can require it and use it with browserify.  A simple demo usage is in `demo/demo.html`, but here's a bit more color on the API:\n\n        <script src=\"/starfox.js\"></script>\n        <script>\n        var sf = new Starfox(); // parameter is the websocket URL to use, \n                                // default is ws://+document.domain+8080\n\n        // Emits a ready event when socket connects\n        sf.on('ready', function() {\n            console.log('It\\'s about time you showed up, Fox. You\\'re the only hope for our world!');\n        });\n\n        // Optional: listen for controller events on the client too:\n        sf.on('input', function(gamepadState) {\n            console.log(gamepadState);\n        });\n        sf.on('gamepadsChanged', function(gamepads) {\n            console.log(gamepads);\n        });\n        </script>\n\n# LICENSE\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "starfox@0.0.1",
  "_shasum": "e791be2e9434ff9075929a70b4867c348c0e0813",
  "_from": "starfox@",
  "_resolved": "https://registry.npmjs.org/starfox/-/starfox-0.0.1.tgz"
}
